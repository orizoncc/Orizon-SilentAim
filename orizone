getgenv().Silent = {
    Setting = {
        IsTargetting = true,
        Prediction = 0.135,
        TargetPart = "HumanoidRootPart",
        WallCheck = true,
        FOV = {
            Radius = 70,
            Visible = true
        }
    }
}

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")
local Camera = workspace.CurrentCamera

local SilentUI = Instance.new("ScreenGui")
local FrameSilent = Instance.new("Frame")
local UICornerSilent = Instance.new("UICorner")
local ToggleSilentButton = Instance.new("TextButton")
local UICornerSilent_2 = Instance.new("UICorner")

SilentUI.Name = "SilentFOVSettings"
SilentUI.Parent = CoreGui
SilentUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

FrameSilent.Parent = SilentUI
FrameSilent.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
FrameSilent.BorderSizePixel = 0
FrameSilent.Size = UDim2.new(0, 150, 0, 60)
FrameSilent.Position = UDim2.new(1, -180, 0, 100)
FrameSilent.Active = true
FrameSilent.Draggable = true
UICornerSilent.Parent = FrameSilent

ToggleSilentButton.Parent = FrameSilent
ToggleSilentButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ToggleSilentButton.Position = UDim2.new(0, 5, 0, 5)
ToggleSilentButton.Size = UDim2.new(1, -10, 1, -10)
ToggleSilentButton.Font = Enum.Font.GothamBlack
ToggleSilentButton.Text = "Toggle FOV Visible"
ToggleSilentButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleSilentButton.TextScaled = true
UICornerSilent_2.Parent = ToggleSilentButton

local FOV = Drawing.new("Circle")
FOV.Transparency = 0.5
FOV.Thickness = 1.6
FOV.Color = Color3.fromRGB(255, 0, 0)
FOV.Filled = false

local function UpdateFOV(Radius)
    if not FOV then return end
    local Inset = GuiService:GetGuiInset().Y
    local MousePosition = Vector2.new(
        game.Players.LocalPlayer:GetMouse().X, 
        game.Players.LocalPlayer:GetMouse().Y + Inset
    )
    
    FOV.Position = MousePosition
    FOV.Visible = getgenv().Silent.Setting.FOV.Visible
    FOV.Radius = Radius * 3.067
end

RunService.RenderStepped:Connect(function()
    UpdateFOV(getgenv().Silent.Setting.FOV.Radius)
end)

ToggleSilentButton.MouseButton1Click:Connect(function()
    getgenv().Silent.Setting.FOV.Visible = not getgenv().Silent.Setting.FOV.Visible
    ToggleSilentButton.Text = getgenv().Silent.Setting.FOV.Visible and "Disable FOV" or "Enable FOV"
    StarterGui:SetCore("SendNotification", {
        Title = "Silent Aim",
        Text = getgenv().Silent.Setting.FOV.Visible and "FOV Enabled" or "FOV Disabled",
        Duration = 3
    })
end)

local function Notification(msg)
    StarterGui:SetCore("SendNotification", {
        Title = "Silent Aim",
        Text = msg,
        Duration = 3
    })
end

Notification("Controls:\n- Toggle FOV Radius: 'T'\n- Hide/Show FOV UI (Frame + Button): 'F'")

local function WallCheck(destination, ignore)
    if getgenv().Silent.Setting.WallCheck then
        local Origin = Camera.CFrame.Position
        local CheckRay = Ray.new(Origin, destination - Origin)
        local Hit = workspace:FindPartOnRayWithIgnoreList(CheckRay, ignore)
        return Hit == nil
    else
        return true
    end
end

local function getClosestChar()
    local Target, Closest = nil, 1 / 0
    local FOVPosition = FOV.Position

    for _, v in pairs(game.Players:GetPlayers()) do
        if v.Character and v ~= game.Players.LocalPlayer and v.Character:FindFirstChild(getgenv().Silent.Setting.TargetPart) then
            local Position, OnScreen = Camera:WorldToScreenPoint(v.Character[getgenv().Silent.Setting.TargetPart].Position)
            local Distance = (Vector2.new(Position.X, Position.Y) - FOVPosition).Magnitude

            if FOV.Radius > Distance and Distance < Closest and OnScreen and WallCheck(v.Character[getgenv().Silent.Setting.TargetPart].Position, {game.Players.LocalPlayer, v.Character}) then
                Closest = Distance
                Target = v
            end
        end
    end
    return Target
end

local Old
Old = hookmetamethod(game, "__index", function(self, key)
    if self:IsA("Mouse") and key == "Hit" then
        local Targetting = getClosestChar()
        if Targetting then
            return Targetting.Character[getgenv().Silent.Setting.TargetPart].CFrame +
                (Targetting.Character[getgenv().Silent.Setting.TargetPart].Velocity * getgenv().Silent.Setting.Prediction)
        end
    end
    return Old(self, key)
end)

game:BindToClose(function()
    if FOV then FOV:Remove() end
end)
